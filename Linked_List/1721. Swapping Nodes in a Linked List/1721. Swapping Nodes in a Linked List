# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next

class Solution(object):
    def swapNodes(self, head, k):
        """
        :type head: Optional[ListNode]
        :type k: int
        :rtype: Optional[ListNode]
        """
        first_k = last_k = head
        curr = head
        
        # Move `first_k` to the k-th node from the start
        for _ in range(k - 1):
            first_k = first_k.next
        
        temp = first_k  # This keeps track of the k-th node from the start

        # Continue moving `curr` to the end of the list and move `last_k` after k steps
        while curr.next:
            curr = curr.next
            if k > 1:
                k -= 1
            else:
                last_k = last_k.next

        # Swap the values of the two nodes
        first_k.val, last_k.val = last_k.val, first_k.val
        
        return head
